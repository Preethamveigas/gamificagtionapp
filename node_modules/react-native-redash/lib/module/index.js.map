{"version":3,"sources":["index.ts"],"names":["Animated","min","default","ReText","Interactable","event","cond","Value","add","multiply","abs","interpolate","divide","sub","eq","snapPoint","value","velocity","points","point","diffPoint","p","deltas","map","minDelta","reduce","acc","binaryInterpolation","origin","destination","inputRange","outputRange","translateZ","perspective","z","scale","onScroll","contentOffset","nativeEvent","useNativeDriver"],"mappings":"yEAAA,MAAOA,CAAAA,QAAP,KAAqB,yBAArB,CACA,OAASC,GAAT,KAAoB,QAApB,CAEA,OAASC,OAAO,GAAIC,CAAAA,MAApB,KAAkC,UAAlC,CACA,OAASD,OAAO,GAAIE,CAAAA,YAApB,KAAwC,gBAAxC,CACA,WAAc,QAAd,CACA,WAAc,UAAd,CACA,WAAc,oBAAd,CACA,WAAc,WAAd,CACA,WAAc,UAAd,CACA,WAAc,OAAd,C,GAEEC,CAAAA,K,CAUEL,Q,CAVFK,K,CACAC,I,CASEN,Q,CATFM,I,CACAC,K,CAQEP,Q,CARFO,K,CACAC,G,CAOER,Q,CAPFQ,G,CACAC,Q,CAMET,Q,CANFS,Q,CACAC,G,CAKEV,Q,CALFU,G,CACAC,W,CAIEX,Q,CAJFW,W,CACAC,M,CAGEZ,Q,CAHFY,M,CACAC,G,CAEEb,Q,CAFFa,G,CACAC,E,CACEd,Q,CADFc,E,CAIF,MAAO,IAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CACvBC,KADuB,CAEvBC,QAFuB,CAGvBC,MAHuB,CAIpB,CACH,GAAMC,CAAAA,KAAK,CAAGX,GAAG,CAACQ,KAAD,CAAQP,QAAQ,CAAC,GAAD,CAAMQ,QAAN,CAAhB,CAAjB,CACA,GAAMG,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACC,CAAD,QAAmCX,CAAAA,GAAG,CAACG,GAAG,CAACM,KAAD,CAAQE,CAAR,CAAJ,CAAtC,EAAlB,CACA,GAAMC,CAAAA,MAAM,CAAGJ,MAAM,CAACK,GAAP,CAAW,SAAAF,CAAC,QAAID,CAAAA,SAAS,CAACC,CAAD,CAAb,EAAZ,CAAf,CACA,GAAMG,CAAAA,QAAQ,CAAGvB,GAAG,MAAH,2BAAOqB,MAAP,EAAjB,CACA,MAAOJ,CAAAA,MAAM,CAACO,MAAP,CAAc,SAACC,GAAD,CAA0BL,CAA1B,QAAwCf,CAAAA,IAAI,CAACQ,EAAE,CAACM,SAAS,CAACC,CAAD,CAAV,CAAeG,QAAf,CAAH,CAA6BH,CAA7B,CAAgCK,GAAhC,CAA5C,EAAd,CAAgG,GAAInB,CAAAA,KAAJ,EAAhG,CAAP,CACD,CAVM,CAYP,MAAO,IAAMoB,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CACjCX,KADiC,CAEjCY,MAFiC,CAGjCC,WAHiC,QAI9BlB,CAAAA,WAAW,CAACK,KAAD,CAAQ,CACtBc,UAAU,CAAE,CAAC,CAAD,CAAI,CAAJ,CADU,CAEtBC,WAAW,CAAE,CAACH,MAAD,CAASC,WAAT,CAFS,CAAR,CAJmB,EAA5B,CAUP,MAAO,IAAMG,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,WAAD,CAA0CC,CAA1C,QACxB,CAAEC,KAAK,CAAEvB,MAAM,CAACqB,WAAD,CAAcpB,GAAG,CAACoB,WAAD,CAAcC,CAAd,CAAjB,CAAf,CADwB,EAAnB,CAKP,MAAO,IAAME,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,aAAD,QAA6EhC,CAAAA,KAAK,CACxG,CACE,CACEiC,WAAW,CAAE,CACXD,aAAa,CAAbA,aADW,CADf,CADF,CADwG,CAQxG,CAAEE,eAAe,CAAE,IAAnB,CARwG,CAAlF,EAAjB","sourcesContent":["import Animated from \"react-native-reanimated\";\nimport { min } from \"./Math\";\n\nexport { default as ReText } from \"./ReText\";\nexport { default as Interactable } from \"./Interactable\";\nexport * from \"./Math\";\nexport * from \"./Colors\";\nexport * from \"./AnimationRunners\";\nexport * from \"./Gesture\";\nexport * from \"./Arrays\";\nexport * from \"./SVG\";\nconst {\n  event,\n  cond,\n  Value,\n  add,\n  multiply,\n  abs,\n  interpolate,\n  divide,\n  sub,\n  eq,\n} = Animated;\n\n// ## Animations\nexport const snapPoint = (\n  value: Animated.Adaptable<number>,\n  velocity: Animated.Adaptable<number>,\n  points: number[],\n) => {\n  const point = add(value, multiply(0.2, velocity));\n  const diffPoint = (p: Animated.Adaptable<number>) => abs(sub(point, p));\n  const deltas = points.map(p => diffPoint(p));\n  const minDelta = min(...deltas);\n  return points.reduce((acc: Animated.Node<any>, p: number) => cond(eq(diffPoint(p), minDelta), p, acc), new Value());\n};\n\nexport const binaryInterpolation = (\n  value: Animated.Adaptable<number>,\n  origin: Animated.Adaptable<number>,\n  destination: Animated.Adaptable<number>,\n) => interpolate(value, {\n  inputRange: [0, 1],\n  outputRange: [origin, destination],\n});\n\n// ## Transformations\nexport const translateZ = (perspective: Animated.Adaptable<number>, z: Animated.Adaptable<number>) => (\n  { scale: divide(perspective, sub(perspective, z)) }\n);\n\n// ## Gestures\nexport const onScroll = (contentOffset: { x?: Animated.Node<number>, y?: Animated.Node<number> }) => event(\n  [\n    {\n      nativeEvent: {\n        contentOffset,\n      },\n    },\n  ],\n  { useNativeDriver: true },\n);\n"]}