{"version":3,"sources":["SVG.ts"],"names":["path","Animated","find","Value","cond","and","greaterOrEq","lessOrEq","interpolate","eq","getParts","d","properties","svgPathProperties","parts","search","startX","startY","endX","endY","forEach","part","push","start","x","end","y","getY","notFound","index","reduce","acc","p","i","inputRange","outputRange","getX"],"mappings":"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","sourcesContent":["import * as path from \"svg-path-properties\";\nimport Animated from \"react-native-reanimated\";\n\nimport { find } from \"./Arrays\";\n\nconst {\n  Value,\n  cond,\n  and,\n  greaterOrEq,\n  lessOrEq,\n  interpolate,\n  eq,\n} = Animated;\n\ninterface Parts {\n  search: { startX: number; endX: number; startY: number; endY: number; }[];\n  startX: number[];\n  startY: number[];\n  endX: number[];\n  endY: number[];\n}\n\nexport const getParts = (d: string): Parts => {\n  const properties = path.svgPathProperties(d);\n  const parts = properties.getParts();\n  const search: ({ startX: number; endX: number; startY: number; endY: number; })[] = [];\n  const startX: number[] = [];\n  const startY: number[] = [];\n  const endX: number[] = [];\n  const endY: number[] = [];\n  parts.forEach((part: any) => {\n    search.push({\n      startX: part.start.x, endX: part.end.x, startY: part.start.y, endY: part.end.y,\n    });\n    startX.push(part.start.x);\n    startY.push(part.start.y);\n    endX.push(part.end.x);\n    endY.push(part.end.y);\n  });\n  return {\n    search,\n    startX,\n    startY,\n    endX,\n    endY,\n  };\n};\n\nexport const getY = (d: string | Parts, x: Animated.Node<number>): Animated.Node<number> => {\n  const parts = typeof d === \"string\" ? getParts(d) : d;\n  const notFound: Animated.Node<number> = new Value(-1);\n  const index = parts.search.reduce(\n    (acc, p, i) => cond(and(greaterOrEq(x, p.startX), lessOrEq(x, p.endX)), i, acc),\n    notFound,\n  );\n  const startX = find(parts.startX, index);\n  const startY = find(parts.startY, index);\n  const endX = find(parts.endX, index);\n  const endY = find(parts.endY, index);\n  const y = interpolate(x, {\n    inputRange: [startX, endX],\n    outputRange: [startY, endY],\n  });\n  return cond(eq(index, notFound), notFound, y);\n};\n\nexport const getX = (d: string | Parts, y: Animated.Node<number>): Animated.Node<number> => {\n  const parts = typeof d === \"string\" ? getParts(d) : d;\n  const notFound: Animated.Node<number> = new Value(-1);\n  const index = parts.search.reduce(\n    (acc, p, i) => cond(and(greaterOrEq(y, p.startY), lessOrEq(y, p.endY)), i, acc),\n    notFound,\n  );\n  const startX = find(parts.startX, index);\n  const startY = find(parts.startY, index);\n  const endX = find(parts.endX, index);\n  const endY = find(parts.endY, index);\n  const x = interpolate(y, {\n    inputRange: [startY, endY],\n    outputRange: [startX, endX],\n  });\n  return cond(eq(index, notFound), notFound, x);\n};\n"]}